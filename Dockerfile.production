# Multi-stage production build for IoT Watch application
FROM python:3.11-slim AS backend-builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy and install Python dependencies
COPY backend/requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy backend code
COPY backend/ .

# Build frontend
FROM node:18-alpine AS frontend-builder

WORKDIR /app

# Copy package files
COPY frontend/package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy frontend source code
COPY frontend/ .

# Build the application
RUN npm run build

# Production stage
FROM python:3.11-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    FLASK_ENV=production \
    PORT=5000

# Create non-root user
RUN groupadd -r iotuser && useradd -r -g iotuser iotuser

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    nginx \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy Python dependencies and backend from builder
COPY --from=backend-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend-builder /app .

# Copy built frontend from builder
COPY --from=frontend-builder /app/dist /usr/share/nginx/html

# Create necessary directories and set permissions
RUN mkdir -p /app/data /app/logs /var/cache/nginx /var/log/nginx /var/run && \
    chown -R iotuser:iotuser /app /usr/share/nginx/html /var/cache/nginx /var/log/nginx /var/run

# Copy nginx configuration
COPY frontend/nginx.conf /etc/nginx/nginx.conf

# Create startup script
RUN echo '#!/bin/bash\n\
# Start nginx in background\n\
nginx\n\
# Start Flask app\n\
exec python app.py' > /app/start.sh && \
    chmod +x /app/start.sh

# Switch to non-root user
USER iotuser

# Expose port
EXPOSE 5000 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:5000/api/latest', timeout=5)" || exit 1

# Start both services
CMD ["/app/start.sh"] 